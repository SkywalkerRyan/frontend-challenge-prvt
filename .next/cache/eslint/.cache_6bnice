[{"D:\\Work\\Personal\\frontend-challenge\\pages\\api\\breeds\\index.ts":"1","D:\\Work\\Personal\\frontend-challenge\\pages\\api\\breeds\\[breedid].ts":"2","D:\\Work\\Personal\\frontend-challenge\\pages\\api\\cats\\[catid].ts":"3","D:\\Work\\Personal\\frontend-challenge\\pages\\index.tsx":"4","D:\\Work\\Personal\\frontend-challenge\\pages\\_app.tsx":"5","D:\\Work\\Personal\\frontend-challenge\\pages\\_document.tsx":"6","D:\\Work\\Personal\\frontend-challenge\\components\\app.tsx":"7","D:\\Work\\Personal\\frontend-challenge\\components\\catCardCreator.tsx":"8","D:\\Work\\Personal\\frontend-challenge\\components\\catCardPanel.tsx":"9","D:\\Work\\Personal\\frontend-challenge\\components\\demoFooter.tsx":"10"},{"size":229,"mtime":1679265456625,"results":"11","hashOfConfig":"12"},{"size":893,"mtime":1679265456622,"results":"13","hashOfConfig":"12"},{"size":877,"mtime":1679265456622,"results":"14","hashOfConfig":"12"},{"size":300,"mtime":1679265456622,"results":"15","hashOfConfig":"12"},{"size":548,"mtime":1679265456622,"results":"16","hashOfConfig":"12"},{"size":244,"mtime":1679265456620,"results":"17","hashOfConfig":"12"},{"size":1530,"mtime":1679265956603,"results":"18","hashOfConfig":"12"},{"size":144,"mtime":1679265456617,"results":"19","hashOfConfig":"12"},{"size":722,"mtime":1679266161750,"results":"20","hashOfConfig":"12"},{"size":124,"mtime":1679265456617,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"196iayu",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"D:\\Work\\Personal\\frontend-challenge\\pages\\api\\breeds\\index.ts",["57"],[],"import type { NextApiRequest, NextApiResponse } from \"next\";\r\n\r\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\r\n  res.status(200).json({\r\n    message: \"Nothing here yet. Try /breeds/[breedid]\",\r\n  });\r\n};\r\n","D:\\Work\\Personal\\frontend-challenge\\pages\\api\\breeds\\[breedid].ts",["58"],[],"import type { NextApiRequest, NextApiResponse } from \"next\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\nconst apiKey = process.env.THECATAPI_KEY;\r\n\r\nasync function getBreedData(breedid: string) {\r\n  try {\r\n    const response = await fetch(\r\n      `https://api.thecatapi.com/v1/breeds/${breedid}`\r\n    );\r\n    const data = response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nconst requestOptions = {\r\n  method: \"GET\",\r\n  headers: {\r\n    \"x-api-key\": apiKey,\r\n  },\r\n};\r\n\r\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\r\n  const { breedid } = req.query;\r\n  if (typeof breedid !== \"string\")\r\n    res.status(500).json({ error: \"breedid<string> required\" });\r\n  else\r\n    try {\r\n      getBreedData(breedid).then((data) => res.status(200).json(data));\r\n    } catch (error) {\r\n      res.status(500).json({ error });\r\n    }\r\n};\r\n","D:\\Work\\Personal\\frontend-challenge\\pages\\api\\cats\\[catid].ts",["59"],[],"import type { NextApiRequest, NextApiResponse } from \"next\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\nconst apiKey = process.env.THECATAPI_KEY;\r\n\r\nasync function getCatData(catid: string) {\r\n  try {\r\n    const response = await fetch(\r\n      `https://api.thecatapi.com/v1/images/${catid}`\r\n    );\r\n    const data = response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nconst requestOptions = {\r\n  method: \"GET\",\r\n  headers: {\r\n    \"x-api-key\": apiKey,\r\n  },\r\n};\r\n\r\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\r\n  const { catid } = req.query;\r\n  if (typeof catid !== \"string\")\r\n    res.status(500).json({ error: \"catid<string> required\" });\r\n  else\r\n    try {\r\n      getCatData(catid).then((data) => res.status(200).json(data));\r\n    } catch (error) {\r\n      res.status(500).json({ error });\r\n    }\r\n};\r\n","D:\\Work\\Personal\\frontend-challenge\\pages\\index.tsx",[],[],"D:\\Work\\Personal\\frontend-challenge\\pages\\_app.tsx",[],[],"D:\\Work\\Personal\\frontend-challenge\\pages\\_document.tsx",[],[],"D:\\Work\\Personal\\frontend-challenge\\components\\app.tsx",[],[],"D:\\Work\\Personal\\frontend-challenge\\components\\catCardCreator.tsx",["60"],[],"const CatCardCreator = () => {\r\n  return <img src=\"catCreatorConcept.png\" alt=\"CatCardCreator concept\" />;\r\n};\r\nexport default CatCardCreator;\r\n","D:\\Work\\Personal\\frontend-challenge\\components\\catCardPanel.tsx",["61"],[],"D:\\Work\\Personal\\frontend-challenge\\components\\demoFooter.tsx",["62"],[],"const DemoFooter = () => {\r\n  return <img src=\"footerConcept.png\" alt=\"footer concept\" />;\r\n};\r\nexport default DemoFooter;\r\n",{"ruleId":"63","severity":1,"message":"64","line":3,"column":1,"nodeType":"65","endLine":7,"endColumn":3},{"ruleId":"63","severity":1,"message":"64","line":26,"column":1,"nodeType":"65","endLine":36,"endColumn":3},{"ruleId":"63","severity":1,"message":"64","line":26,"column":1,"nodeType":"65","endLine":36,"endColumn":3},{"ruleId":"66","severity":1,"message":"67","line":2,"column":10,"nodeType":"68","endLine":2,"endColumn":74},{"ruleId":"66","severity":1,"message":"67","line":12,"column":7,"nodeType":"68","endLine":12,"endColumn":60},{"ruleId":"66","severity":1,"message":"67","line":2,"column":10,"nodeType":"68","endLine":2,"endColumn":62},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Use `<Image />` from `next/image` instead to utilize Image Optimization. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement"]